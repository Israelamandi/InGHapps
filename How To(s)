To develop a cross-platform mobile app that can run on both Android and iOS, one approach is to use a cross-platform mobile app development framework such as React Native or Flutter.

Using React Native as an example, you can create a new project with the following steps:

1. Install Node.js and npm (Node Package Manager) if you haven't already.
2. Open a terminal window and run the following command to install the React Native CLI:
```
npm install -g react-native-cli
```
3. Create a new React Native project by running the following command in the terminal:
```
npx react-native init MyProjectName
```
This will create a new project with the name "MyProjectName" in the current directory.

Once you have created your project, you can write your code for the Splash screen in the `App.js` file. Here is an example code snippet for a simple Splash screen:

```
import React, { useEffect } from 'react';
import { View, Text, Image, StyleSheet } from 'react-native';

const Splash = ({ navigation }) => {

  useEffect(() => {
    setTimeout(() => {
      navigation.replace('Home');
    }, 3000); // Change this value to set the duration of the Splash screen
  }, []);

  return (
    <View style={styles.container}>
      <Image source={require('./assets/logo.png')} style={styles.logo} />
      <Text style={styles.title}>My App</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#ffffff',
  },
  logo: {
    width: 150,
    height: 150,
  },
  title: {
    marginTop: 16,
    fontSize: 24,
    fontWeight: 'bold',
  },
});

export default Splash;
```

This code defines a functional component called "Splash" that displays an image and a title for the app. The `useEffect` hook is used to navigate to the "Home" screen after a specified duration (in milliseconds). 

To test the Splash screen, you can run the app on an emulator or a physical device using the following commands:

```
npx react-native run-android
```
or
```
npx react-native run-ios
```

As for hosting the app to handle any number of users, you can deploy your app to a cloud platform such as AWS or Google Cloud Platform, using services such as Elastic Beanstalk or App Engine respectively, to ensure scalability and high availability.
